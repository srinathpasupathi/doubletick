'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isNonNullObject = require('../utils/validator').isNonNullObject;
var isStringOrNumber = require('../utils/validator').isStringOrNumber;
var isNonEmptyString = require('../utils/validator').isNonEmptyString;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystFilestoreError = require('../utils/error').CatalystFilestoreError;
var FORM = require('../utils/form-data');
var Folder = /** @class */ (function (_super) {
    __extends(Folder, _super);
    function Folder(folderDetails, fileInstance) {
        var _this = _super.call(this, fileInstance) || this;
        _this._folderDetails = folderDetails;
        _this.requester = fileInstance.requester;
        return _this;
    }
    Folder.prototype.update = function (folderDetails) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(folderDetails, 'folder_object', true);
            isNonEmptyString(folderDetails.folder_name, 'folder_name in folder_object', true);
        }, CatalystFilestoreError).then(function () {
            var postData = {
                folder_name: folderDetails.folder_name
            };
            var request = {
                method: 'PUT',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder/" + _this._folderDetails.id,
                data: postData,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Folder.prototype.delete = function () {
        var request = {
            method: 'DELETE',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/folder/" + this._folderDetails.id
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            if (json.data) {
                return true;
            }
        });
    };
    Folder.prototype.getFileDetails = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'file_id', true);
        }, CatalystFilestoreError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder/" + _this._folderDetails.id + "/file/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Folder.prototype.deleteFile = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'file_id', true);
        }, CatalystFilestoreError).then(function () {
            var request = {
                method: 'DELETE',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder/" + _this._folderDetails.id + "/file/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                if (json.data) {
                    return true;
                }
            });
        });
    };
    Folder.prototype.uploadFile = function (fileDetails) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(fileDetails, 'file_object', true);
            isNonEmptyString(fileDetails.name, 'name in file_object', true);
        }, CatalystFilestoreError).then(function () {
            var formData = new FORM();
            formData.append('code', fileDetails.code);
            formData.append('file_name', fileDetails.name);
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder/" + _this._folderDetails.id + "/file",
                data: formData,
                type: 'file'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Folder.prototype.downloadFile = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'file_id', true);
        }, CatalystFilestoreError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder/" + _this._folderDetails.id + "/file/" + id + "/download"
            };
            return _this.requester.send(request).then(function (resp) {
                return resp.buffer;
            });
        });
    };
    Folder.prototype.toString = function () {
        return JSON.stringify(this._folderDetails);
    };
    Folder.prototype.toJSON = function () {
        return this._folderDetails;
    };
    return Folder;
}(CatalystAppInternals));
exports.Folder = Folder;
