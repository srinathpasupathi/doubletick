'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isNonNullObject = require('../utils/validator').isNonNullObject;
var isStringOrNumber = require('../utils/validator').isStringOrNumber;
var isNonNullArray = require('../utils/validator').isNonNullArray;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystDatastoreError = require('../utils/error').CatalystDatastoreError;
var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table(tableDetails, datastoreInstance) {
        var _this = _super.call(this, datastoreInstance) || this;
        _this._tableDetails = tableDetails;
        _this.requester = datastoreInstance.requester;
        return _this;
    }
    Table.prototype.getColumnDetails = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'column_id', true);
        }, CatalystDatastoreError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/column/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Table.prototype.getAllColumns = function () {
        var request = {
            method: 'GET',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/table/" + (this
                ._tableDetails.table_id || this._tableDetails.table_name) + "/column"
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            return json.data;
        });
    };
    Table.prototype.insertRow = function (row) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(row, 'row', true);
        }, CatalystDatastoreError).then(function () {
            var rowArr = [];
            rowArr.push(row);
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/row",
                data: rowArr,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data[0];
            });
        });
    };
    Table.prototype.insertRows = function (rowArr) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullArray(rowArr, 'rows', true);
        }, CatalystDatastoreError).then(function () {
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/row",
                data: rowArr,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Table.prototype.getAllRows = function () {
        var request = {
            method: 'GET',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/table/" + (this
                ._tableDetails.table_id || this._tableDetails.table_name) + "/row"
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            return json.data;
        });
    };
    Table.prototype.getRow = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'row_id', true);
        }, CatalystDatastoreError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/row/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Table.prototype.deleteRow = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'row_id', true);
        }, CatalystDatastoreError).then(function () {
            var request = {
                method: 'DELETE',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/row/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data ? true : false;
            });
        });
    };
    Table.prototype.updateRow = function (row) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(row, 'row', true);
            isStringOrNumber(row.ROWID, 'ROWID in row', true);
        }, CatalystDatastoreError).then(function () {
            var request = {
                method: 'PUT',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/row",
                data: [row],
                type: 'json'
            };
            return _this.requester.send(request, _this).then(function (resp) {
                var json = resp.data;
                return json.data[0];
            });
        });
    };
    Table.prototype.updateRows = function (rows) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullArray(rows, 'row', true);
        }, CatalystDatastoreError).then(function () {
            var request = {
                method: 'PUT',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/table/" + (_this
                    ._tableDetails.table_id || _this._tableDetails.table_name) + "/row",
                data: rows,
                type: 'json'
            };
            return _this.requester.send(request, _this).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Table.prototype.toString = function () {
        return JSON.stringify(this._tableDetails);
    };
    Table.prototype.toJSON = function () {
        return this._tableDetails;
    };
    return Table;
}(CatalystAppInternals));
exports.Table = Table;
